{
    "version": "https://jsonfeed.org/version/1",
    "title": "linrz",
    "home_page_url": "linrz.me",
    "feed_url": "linrz.me/feed.json",
    "items": [
        {
            "id": "linrz.me/2017/11/05/fastify/",
            "url": "linrz.me/2017/11/05/fastify/",
            "title": "Fastify",
            "summary": "最近 Fastify 这个 Node.js 框架忽然出现在大家的视野中，号称处理请求的速度超过老牌框架 Express/Koa/Hapi 等。",
            "image": "http://img.lastwhisper.cn/fastify-benchmark.png",
            "date_modified": "2017-11-05T12:00:00.000Z"
        },
        {
            "id": "linrz.me/2019/09/16/a-coincidence-bug/",
            "url": "linrz.me/2019/09/16/a-coincidence-bug/",
            "title": "一个机缘巧合的 bug",
            "summary": "一路跟踪到 cdn 的包发现把这个 css 文件识别为了 video/mp2t 类型的文件了，和后缀名不一样阻止了上传。",
            "image": "http://img.lastwhisper.cn/file-code.png",
            "date_modified": "2019-09-16T15:50:00.000Z"
        },
        {
            "id": "linrz.me/2019/08/09/mac-apps-i-used/",
            "url": "linrz.me/2019/08/09/mac-apps-i-used/",
            "title": "我常用的 MacOS Application",
            "date_modified": "2019-08-08T20:00:00.000Z"
        },
        {
            "id": "linrz.me/2019/01/12/pnp/",
            "url": "linrz.me/2019/01/12/pnp/",
            "title": "Yarn Plug'n'Play",
            "summary": "yarn@1.11 版本中引入了 -pnp 参数，宣告彻底抛弃 nodemodules 的一种解决方案 :sunglasses: ，pnp = Plug'n'Play = Plug and Play，意为可插拔的意思，是 yarn 在18年11月份时接受的101号 RFC 提案，目的在于解决安装依赖的耗时瓶颈，系统的 I/O 时间，我们知道无论是 npm 还是 yarn 亦或是其他的包管理工具，都具备缓存的功能，大多数情况下安装依赖时，其实是将缓存中的相关包复制到项目目录中 nodemodules 里。 yarn -pnp 的本质就是为了优化这关键的一步操作，在详细介绍之前，先了解下社区其他的解决方案。",
            "image": "http://img.lastwhisper.cn/pnp-map.png",
            "date_modified": "2019-01-12T12:00:00.000Z"
        },
        {
            "id": "linrz.me/2018/05/15/why-i-unlike-styled-components/",
            "url": "linrz.me/2018/05/15/why-i-unlike-styled-components/",
            "title": "为什么我不喜欢 styled-components",
            "summary": "实际上图中的的\b所有组件都是 styled-components，可以约定以  开头，但总觉得有点烦恼呀",
            "image": "http://img.lastwhisper.cn/styled-components-render.png",
            "date_modified": "2018-05-14T20:00:00.000Z"
        },
        {
            "id": "linrz.me/2019/11/11/the-future-of-javascript-package-managment/",
            "url": "linrz.me/2019/11/11/the-future-of-javascript-package-managment/",
            "title": "The future of JavaScript package managment",
            "summary": "令人振奋的是 Yarn/NPM 都提出了下一代包管理器，在前几篇博文中有提到过，Yarn 提出了 pnp，NPM 提出了 Tink，他们都解决了上文所说的重复依赖占用空间和 resolve 查找过于复杂的问题。顺便提一下 PNPM，PNPM 基于 Symbolic link 和 Hard link 解决了这些 99% 的问题，但也带了 1% 的隐患问题，这里不再赘述， arcanis 在 Yarn 的 RFC 中提到过。",
            "image": "http://img.lastwhisper.cn/WechatIMG101.png",
            "date_modified": "2019-11-10T17:00:00.000Z"
        },
        {
            "id": "linrz.me/2019/03/21/berry/",
            "url": "linrz.me/2019/03/21/berry/",
            "title": "yarn@berry",
            "summary": "run / add 相关的命令不再不需 cd 到一个个子 package \b目录下执行。",
            "date_modified": "2019-03-20T19:30:00.000Z"
        }
    ]
}