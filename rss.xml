<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>linrz</title>
        <link>linrz.me</link>
        <description></description>
        <lastBuildDate>Wed, 01 Apr 2020 09:16:11 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>https://github.com/webmasterish/vuepress-plugin-feed</generator>
        <atom:link href="linrz.me/feed.atom" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[Fastify]]></title>
            <link>linrz.me/2017/11/05/fastify/</link>
            <guid>linrz.me/2017/11/05/fastify/</guid>
            <pubDate>Sun, 05 Nov 2017 12:00:00 GMT</pubDate>
            <description><![CDATA[最近 Fastify 这个 Node.js 框架忽然出现在大家的视野中，号称处理请求的速度超过老牌框架 Express/Koa/Hapi 等。]]></description>
            <enclosure url="http://img.lastwhisper.cn/fastify-benchmark.png">
            </enclosure>
        </item>
        <item>
            <title><![CDATA[一个机缘巧合的 bug]]></title>
            <link>linrz.me/2019/09/16/a-coincidence-bug/</link>
            <guid>linrz.me/2019/09/16/a-coincidence-bug/</guid>
            <pubDate>Mon, 16 Sep 2019 15:50:00 GMT</pubDate>
            <description><![CDATA[一路跟踪到 cdn 的包发现把这个 css 文件识别为了 video/mp2t 类型的文件了，和后缀名不一样阻止了上传。]]></description>
            <enclosure url="http://img.lastwhisper.cn/file-code.png">
            </enclosure>
        </item>
        <item>
            <title><![CDATA[我常用的 MacOS Application]]></title>
            <link>linrz.me/2019/08/09/mac-apps-i-used/</link>
            <guid>linrz.me/2019/08/09/mac-apps-i-used/</guid>
            <pubDate>Thu, 08 Aug 2019 20:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Yarn Plug'n'Play]]></title>
            <link>linrz.me/2019/01/12/pnp/</link>
            <guid>linrz.me/2019/01/12/pnp/</guid>
            <pubDate>Sat, 12 Jan 2019 12:00:00 GMT</pubDate>
            <description><![CDATA[yarn@1.11 版本中引入了 -pnp 参数，宣告彻底抛弃 nodemodules 的一种解决方案 :sunglasses: ，pnp = Plug'n'Play = Plug and Play，意为可插拔的意思，是 yarn 在18年11月份时接受的101号 RFC 提案，目的在于解决安装依赖的耗时瓶颈，系统的 I/O 时间，我们知道无论是 npm 还是 yarn 亦或是其他的包管理工具，都具备缓存的功能，大多数情况下安装依赖时，其实是将缓存中的相关包复制到项目目录中 nodemodules 里。 yarn -pnp 的本质就是为了优化这关键的一步操作，在详细介绍之前，先了解下社区其他的解决方案。]]></description>
            <enclosure url="http://img.lastwhisper.cn/pnp-map.png">
            </enclosure>
        </item>
        <item>
            <title><![CDATA[为什么我不喜欢 styled-components]]></title>
            <link>linrz.me/2018/05/15/why-i-unlike-styled-components/</link>
            <guid>linrz.me/2018/05/15/why-i-unlike-styled-components/</guid>
            <pubDate>Mon, 14 May 2018 20:00:00 GMT</pubDate>
            <description><![CDATA[实际上图中的的所有组件都是 styled-components，可以约定以  开头，但总觉得有点烦恼呀]]></description>
            <enclosure url="http://img.lastwhisper.cn/styled-components-render.png">
            </enclosure>
        </item>
        <item>
            <title><![CDATA[The future of JavaScript package managment]]></title>
            <link>linrz.me/2019/11/11/the-future-of-javascript-package-managment/</link>
            <guid>linrz.me/2019/11/11/the-future-of-javascript-package-managment/</guid>
            <pubDate>Sun, 10 Nov 2019 17:00:00 GMT</pubDate>
            <description><![CDATA[令人振奋的是 Yarn/NPM 都提出了下一代包管理器，在前几篇博文中有提到过，Yarn 提出了 pnp，NPM 提出了 Tink，他们都解决了上文所说的重复依赖占用空间和 resolve 查找过于复杂的问题。顺便提一下 PNPM，PNPM 基于 Symbolic link 和 Hard link 解决了这些 99% 的问题，但也带了 1% 的隐患问题，这里不再赘述， arcanis 在 Yarn 的 RFC 中提到过。]]></description>
            <enclosure url="http://img.lastwhisper.cn/WechatIMG101.png">
            </enclosure>
        </item>
        <item>
            <title><![CDATA[yarn@berry]]></title>
            <link>linrz.me/2019/03/21/berry/</link>
            <guid>linrz.me/2019/03/21/berry/</guid>
            <pubDate>Wed, 20 Mar 2019 19:30:00 GMT</pubDate>
            <description><![CDATA[run / add 相关的命令不再不需 cd 到一个个子 package 目录下执行。]]></description>
        </item>
    </channel>
</rss>